#!/usr/bin/env node
/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('team04:server');
let http = require('http');
let socketio = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Create socket io
 */
require('../public/js/socket/socket_server').init(socketio(server));

// let chat = require('../public/js/chat/chat');
//
// let chatName = 'Tulip Air';
//
// // Run when client connects
// io.on('connection', socket => {
//
//     socket.on('joinRoom', ({username, room}) => {
//         const user = chat.userJoin(socket.id, username, room);
//
//         socket.join(user.room);
//
//         // Welcome current user
//         socket.emit('message', chat.getMessage(chatName, 'Welcome ' + username + ' to ' + room + ' chat room!'));
//
//         // Broadcast when a user connects
//         socket.broadcast
//             .to(user.room)
//             .emit(
//                 'message',
//                 chat.getMessage(chatName, `${user.username} heeft de chat gejoined!`)
//             );
//
//         // Send users and room info
//         io.to(user.room).emit('roomUsers', {
//             room: user.room,
//             users: chat.getRoomUsers(user.room)
//         });
//     });
//
//     // Listen for chatMessage
//     socket.on('chatMessage', message => {
//         console.log(message);
//         const user = chat.getCurrentUser(socket.id);
//
//         io.to(user.room).emit('message', chat.getMessage(user.username, message));
//     });
//
//     // Listen for chatMessage
//     socket.on('chatTyping', message => {
//         const user = chat.getCurrentUser(socket.id);
//
//         socket.broadcast
//             .to(user.room).emit('typing', user.username + ' is aan het typen...');
//     });
//
//     // Runs when client disconnects
//     socket.on('disconnect', () => {
//         const user = chat.userLeave(socket.id);
//
//         if (user) {
//             io.to(user.room).emit(
//                 'message',
//                 chat.getMessage(chatName, `${user.username} heeft de chat verlaten!`)
//             );
//
//             // Send users and room info
//             io.to(user.room).emit('roomUsers', {
//                 room: user.room,
//                 users: chat.getRoomUsers(user.room)
//             });
//         }
//     });
//
// });

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Listen on provided port, on all network interfaces.
 */

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

async function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    console.debug('Listening on ' + bind);
}

